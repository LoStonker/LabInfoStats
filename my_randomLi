import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as sc

"""
Funzioni per generare numeri pseudo casuali
"""

def generatore_casual_pdf(pdf, n, xmin, xmax, N):
	"""
  	Questa funzione prende in ingresso: una pdf qualunque, 
	massimo e minimo del dominio delle x e quanto voglio grande questo dominio N
	e infine quanti numeri n piccolo voglio generare"""
	
	x = np.linspace(xmin, xmax, N)
	pdf_values = pdf(x)
	pdf_values /= np.trapz(pdf_values) #normalizzo la pdf con l'integrale

	cdf = np.cumsum(pdf_values)
	cdf /= cdf[-1]  

	random_numbers = np.random.uniform(0, 1, size=n)
	samples = np.interp(random_numbers, cdf, x)  #interp mi trasforma i dati con la cdf
	return samples, x, pdf_values


def TCL(media, sigma, Neventi):                
    """
    Funzione che genera eventi gaussiani con il TCL conosciuti media e sigma
    """
    risultati = [] 
    for i in range(Neventi):
        eventi = 0
        delta = np.sqrt(3*Neventi)*sigma
        xmin = media - delta
        xmax = media + delta
        for i in range (Neventi):
            eventi += np.random.uniform(xmin, xmax)
        eventi /= Neventi
        risultati.append(eventi) 
    return risultati 


def inversa_exponential(t0, N):
	"""
	Funzione che mi genera N numeri distribuiti esponenzialmente con lambda=1/t0
	"""
	u = np.random.uniform(0, 1, N)
	f = -t0 * np.log(1 - u)
	return f


def generatore_poisson(t, N):                   
	#il contatore mi restituisce un numero che è sostanzialmente per quante volte moltiplico p per un numero casuale
	risultati = []
	for i in range(N):
		contatore = 0
		p = 1
		while p > np.exp(-t):
			contatore += 1
			p *= np.random.uniform(0, 1)     	#p mi accumula il prodotto di numeri casuali fino a quando questo non è minore del tempo tra eventi successivi
                                          			#di una distribuzione esponenziale, quindi sostanzialmente il numero di eventi tra due eventi successivi
		risultati.append(contatore - 1)
	return risultati


def generatore_gaussiani(Ntoy, Neventi):      
    """
    Argomenti:
    - Ntoy (int): Numero di simulazioni da generare.
    - Neventi (int): Numero di eventi per ogni simulazione.

    Ritorna:
    - medie (list): Lista delle medie calcolate per ogni simulazione.
    - sigma (list): Lista delle stime dell'errore sulla media per ogni simulazione.
    """
    medie = []
    for _ in range(Ntoy):
        eventi = np.random.uniform(0, 1, Neventi)  # Genera eventi uniformi
        toy_stats = np.mean(eventi)               # Calcola la media
        medie.append(toy_stats)                   # Aggiungi alla lista delle medie

    sigma_valore = np.std(np.random.uniform(0, 1, Neventi)) / np.sqrt(Neventi)
    sigma = [sigma_valore] * Ntoy  # Stima costante per ogni toy

    return medie, sigma


def hit_or_miss_generator(f, a, b, m, M, N):
  """
  Argomenti: 
  f = funzione, [a, b] = estremi della base del rettangolo, 
  [m, M] = estremi altezza del rettangolo (spesso m = 0), N = numeri da generare
  """
  sample = []
  hits = 0
  x_values = np.random.uniform(a, b, N)
  y_values = np.random.uniform(m, M, N)
  for i in range(N):
    if y_values[i] <= f(x_values[i]):
      sample.append(x_values[i])
      hits += 1
  Area_rettangolo = (hits/N)*(b-a)*(M-m)
  return sample, Area_rettangolo


def try_and_catch_generator_v2(f, a, b, M, N):
    """
    Argomenti: 
    f: la pdf, funzione da campionare
    a, b: insieme di generazione (limiti di campionamento)
    M: valore tale che la pdf è minore di M (fattore di normalizzazione)
    N: numero di eventi da generare

    Return: sample di eventi generati tramite il metodo Try-and-Catch
    """
    sample = []
    attempts = 0  # Contatore per tentativi
    while len(sample) < N:  # Fino a che non raggiungi N eventi
        x = np.random.uniform(a, b)  # Genera un singolo valore x
        u = np.random.uniform(0, 1)  # Un numero casuale tra 0 e 1
        if u <= f(x)/M:  # Se il punto è sotto la curva
            sample.append(x)  # Aggiungi il punto alla lista dei campioni
        attempts += 1
        if attempts >= 100000:  # Massimo numero di tentativi
            print("Maximum attempts reached!")
            break
    return sample


def try_and_catch_generator(f, a, b, M, N):
  """
  Argomenti: pdf f, (a, b) insieme di generazione, M=valore tale per cui
  f è minore di M, N=numero eventi da generare

  Return: sample di eventi
  """
  sample = []
  x = np.random.uniform(a, b, N)
  u = np.random.uniform(0, 1, N)
  for i in range(N):
    if u[i] <= f(x[i])/M:
      sample.append(x[i])
  return sample


def TCL_pdf(f, a, b, Neventi):
  """
  Argomenti: una pdf f, (a,b) intervallo di generazione
  """
  sample = []
  n = 10
  for i in range(Neventi):
    media = np.mean(mr.generatore_casual_pdf(f, n, a, b, n))
    sample.append(media)
  return sample


def generate_gauss_Box_Muller(Neventi, mu, sigma):
  """
  La funzione genera Neventi gaussiani con media mu e dev sigma
  """
  sample = []
  g1_tot = []
  g2_tot = []
  transform = lambda x : x * sigma + mu 
  #Moltiplicare per sigma mi trasforma la larghezza da 1 a sigma e aggiungo mu per traslare
  for i in range(N):
    x1 = np.random.uniform(0, 1)
    x2 = np.random.uniform(0, 1)
    p = np.sqrt(-2*np.log(x1))
    g1 = p*np.cos(2*np.pi*x2)
    g2 = p*np.sin(2*np.pi*x2)
    g1_tot.append(transform(g1))
    g2_tot.append(transform(g2))
  sample = np.concatenate([g1_tot, g2_tot])
  return sample


def generate_gauss_bm(Neventi):
  """
  La funzione genera Neventi gaussiani
  """
  sample = []
  g1_tot = []
  g2_tot = []
  for i in range(N):
    x1 = np.random.uniform(0, 1)
    x2 = np.random.uniform(0, 1)
    p = np.sqrt(-2*np.log(x1))
    g1 = p*np.cos(2*np.pi*x2)
    g2 = p*np.sin(2*np.pi*x2)
    g1_tot.append(g1)
    g2_tot.append(g2)
  sample = np.concatenate([g1_tot, g2_tot])
  return sample
 
