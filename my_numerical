import numpy as np
import matplotlib.pyplot as plt

"""
Formule per trovare zeri, massimi e minimi e integrali per via numerica"""


def bisezione_iterativa(f, a, b, tolleranza=1e-6, max_iter=100):
    """
    Bisezione usa il metodo di bisezione per trovare lo zero di funzione sfruttando 
    il teorema degli zeri
    Argomenti = la funzione, gli estremi 'a' e 'b', la tolleranza che posso impostare

    Return = valore medio dell'interallo finale
    """
    if f(a) * f(b) >= 0:
        raise ValueError("La funzione deve avere segni opposti ai due estremi dell'intervallo [a, b].")
    iterazioni = 0
    while (b - a) / 2 > tolleranza and iterazioni < max_iter:
        c = (a + b) / 2  
        if f(c) == 0:    #abbiamo trovato lo zero esatto
            return c
        elif f(a) * f(c) < 0:
            b = c       #lo zero è nell'intervallo [a, c]
        else:
            a = c       #lo zero è nell'intervallo [c, b]
        iterazioni += 1
    return (a + b) / 2 
    

def bisezione_ricorsiva(f, a, b, tolleranza=1e-6):
    """
    Metodo ricorsivo per trovare lo zero di una funzione usando il metodo di bisezione.
    Lancia un'eccezione se l'intervallo fornito non contiene uno zero.
    """
    if f(a) * f(b) > 0:
        raise ValueError("L'intervallo fornito non contiene uno zero (segni uguali ai due estremi).")
    c = (a + b) / 2  # Punto medio
    if abs(f(c)) < tolleranza or abs(b - a) / 2 < tolleranza:
        return c
    if f(a) * f(c) < 0:
        if f(a) * f(b) > 0:
            raise ValueError("Intervallo non valido durante la ricorsione.")
        return bisezione_ricorsiva(f, a, c, tolleranza)
    else:
        if f(a) * f(b) > 0:
            raise ValueError("Intervallo non valido durante la ricorsione.")
        return bisezione_ricorsiva(f, c, b, tolleranza)


def minimi_sezioneAurea(f, a, b, tolleranza=1e-6):
  phi = (1 + np.sqrt(5)) / 2
  x1 = a + (b-a)/(phi**2)
  x2 = a + (b-a)/(phi)
  if (b-a) < tolleranza:
    min = (a + b) / 2
    minf = f(min)
    return [min, minf]
  elif f(x1) < f(x2):
    return minimi_sezioneAurea(f, a, x2, tolleranza)
  else:
    return minimi_sezioneAurea(f, x1, b, tolleranza)


def massimi_sezioneAurea(f, a, b, tolleranza=1e-6):
    phi = (1 + np.sqrt(5)) / 2
    x1 = a + (b-a)/(phi**2)
    x2 = a + (b-a)/(phi)
    if (b-a) < tolleranza:
        max = (a + b) / 2
        maxf = f(max)
        return [max, maxf]
    elif f(x1) > f(x2):
        return massimi_sezioneAurea(f, a, x2, tolleranza)
    else:
        return massimi_sezioneAurea(f, x1, b, tolleranza)


def hit_or_miss_integrate(f, a, b, N, M):      
    """
    La funzione ha come entrate la funzione f, gli estremi "a" e "b", 
    il numero di eventi da generare e l'estremo superiore M della funzione
    """
    x_rand = np.random.uniform(a, b, N)
    y_rand = np.random.uniform(0, M, N)
    hits = y_rand <= f(x_rand)
    successi = np.sum(hits)
    A_rect = (b - a) * M
    p = successi / N
    integral = p * A_rect
    std_integral = np.sqrt(((A_rect**2) / N) * p * (1 - p))
    return integral, std_integral


def crude_montecarlo_integrate(f, a, b, N):
    """
    Montecarlo Method stima numericamente l'integrale sfruttando E[f(x)]
    Argomenti: la funzione, gli estremi e il numero di elementi N
    """
    x = np.linspace(a, b, N)
    f_values = f(x)  
    mean = np.mean(f_values)
    std_dev = np.std(f_values)
    integral = (b - a) * mean
    err = (b - a) * std_dev / np.sqrt(N)
    return integral, err


def MC_bidimensionale(f, xmin, xmax, ymin, ymax, M, N):
  """
  La funzione calcola un integrale di una funzione in due variabili
  """
  x = np.random.uniform(xmin, xmax, N)
  y = np.random.uniform(ymin, ymax, N)
  z = np.random.uniform(0, M, N)
  hits = z <= f(x, y)
  successi = np.sum(hits)
  A_rect = (xmax - xmin) * (ymax - ymin) * M
  p = successi / N
  integral = p * A_rect
  std_integral = np.sqrt(((A_rect**2) / N) * p * (1 - p))
  return integral, std_integral
