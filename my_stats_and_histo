import numpy as np
import matplotlib.pyolot as plt
import scipy.stats as sc
from math import ceil, floor
"""
Formule base di statistica 
"""

def mediana(array):		"""Mediana, richiede in ingresso un array di numpy"""
	b = np.sort(array)
	n = len(array)
	if n % 2 == 0:
		median = (b[n//2 -1] + b[n//2]) / 2
	else:
		median = b[n//2]
	return median


def media(x): 			#MEDIA
	m = 0.0
	for i in x:
    		m += i # += incrementa la variabile somma di i
    		m /= len(x) # /= divide la variabile m per len(x)
	return m


def devst(x): 			#DEVIAZIONE #STANDARD
	s = 0.0
	N = len(x)
	m = media(x)
	for i in x:
  		s = s + (i-m)**2 
	v = math.sqrt(s/(N-1))
	return v


def varianza(x):		#VARIANZA #CAMPIONARIA
	s = 0.0
	N = len(x)
	m = media(x)
	for i in x:
		s = s + (i-m)**2 
	v = math.sqrt(s/(N-1))
	return v**2


def erroreStandardMedia(x): 	"""ERRORE STANDARD DELLA MEDIA"""
	N = len(x)
	e = devst(x)/math.sqrt(N)
	return e


def percentile(x,p):
    """A function that determines the value above which lies the a certain fraction of the values.
    Args:
        x (numpy.ndarray): the array for which the percentile is to be calculated
        p (float): the fraction of the values (should be whithin [0,1])
    Returns:
        float: the value above which lies the fraction `p` of the values
    """
    if not (0 < p and p < 1):
        raise ValueError(f'The percentile value p = {p} is not within the range [0,1]')
    x_sorted = np.sort(x)
    idx = int(p*len(x))
    pv = x_sorted[idx]
    return p


def sturges (n):		"""STURGES PER IL NUMERO DI BIN"""
	return int(np.ceil(1+3.322*np.log(n)))


def two_data_binning(data1, data2):
	"""Questa funzione, dati due set di dati diversi, mi trova
	il binning ottimale per plottare l'istogramma"""

	xMin = floor (min (min (data1), min (data2)))
	xMax = ceil (max (max (data1), max (data2)))
	N_bins = sturges (min (len (data1), len (data2)))
	bin_edges = np.linspace (xMin, xMax, N_bins)
	return bin_edges


def one_data_binning(data, N):		"""N è fino a che numero devo considerare
	Questa funzione dato un solo set di dati mi trova il binning ottimale
	andando a considerare i primi N elementi 
	Se li voglio tutti basta che metto N totale"""

	xmin = min(data[:N])
	xmax = max(data[:N])
	Nbins = sturges(N)
	binedges = np.linspace(xmin, xmax, Nbins)
	return binedges


def plot_histogram(data, bins, label, color, edgescolor, xlabel, ylabel, overlay=None, density=True):
    """
    Crea un istogramma personalizzato con opzione di sovrapporre una curva teorica.
    Argomenti:
        data (array-like): Dati da plottare.
        bins (int): Numero di bin dell'istogramma.
        density (bool): Se True, normalizza l'istogramma.
        label (str): Etichetta dei dati.
        color (str): Colore dell'istogramma.
        overlay (callable): Funzione teorica da sovrapporre (opzionale), Se overlay
		non è nullo ci metto la funzione, cioè la pdf (senza l'argomento, solamente il nome della funzione)
    """
    
	plt.hist(data, bins=bins, density=density, alpha=0.6, color=color, label=label)
    	if overlay is not None:
        	x = np.linspace(min(data), max(data), 500)
        	plt.plot(x, overlay(x), label="Theoretical", color='red')
    	plt.xlabel(xlabel)
    	plt.ylabel(ylabel if density else "Count")
    	plt.legend()
    	plt.show()







